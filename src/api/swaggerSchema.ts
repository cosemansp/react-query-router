/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/basket/{key}/products/{productId}": {
    /** @description Add a product on the basket */
    post: {
      parameters: {
        path: {
          productId: string;
          key: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            quantity: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["basket"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
        /** @description CONFLICT */
        409: never;
      };
    };
    /** @description Remove product from basket */
    delete: {
      parameters: {
        path: {
          productId: string;
          key: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["basket"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
      };
    };
    /** @description Update the quantity of a product */
    patch: {
      parameters: {
        path: {
          productId: string;
          key: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            quantity: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["basket"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
        /** @description CONFLICT */
        409: never;
      };
    };
  };
  "/api/v1/basket/{key}": {
    /** @description Gets all basket items */
    get: {
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["basket"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
      };
    };
    /** @description Clear the basket */
    delete: {
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["basket"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
      };
    };
  };
  "/api/v1/products/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["product"];
          };
        };
        /** @description NO_FOUND */
        404: never;
      };
    };
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["productUpdate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["product"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
        /** @description NOT_FOUND */
        404: never;
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["product"];
          };
        };
        /** @description NO_CONTENT */
        204: never;
      };
    };
  };
  "/api/v1/products": {
    get: {
      parameters: {
        query: {
          page?: number | null;
          pageSize?: number | null;
          sortBy?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["productList"];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["productCreate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["product"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
      };
    };
  };
  "/api/v1/tasks/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["task"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
      };
    };
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["taskUpdate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["task"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
        /** @description NOT_FOUND */
        404: never;
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["task"];
          };
        };
        /** @description NOT_FOUND */
        404: never;
      };
    };
  };
  "/api/v1/tasks": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["task"];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["taskCreate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["task"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
      };
    };
  };
  "/api/v1/users/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["user"];
          };
        };
        /** @description NO_FOUND */
        404: never;
      };
    };
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["userUpdate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["user"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
        /** @description NOT_FOUND */
        404: never;
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["user"];
          };
        };
        /** @description NO_CONTENT */
        201: never;
      };
    };
  };
  "/api/v1/users": {
    get: {
      parameters: {
        query: {
          page?: number | null;
          pageSize?: number | null;
          sortBy?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["userList"];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["userCreate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["user"];
          };
        };
        /** @description BAD_REQUEST */
        400: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    basket: ({
        id: number;
        productId: number;
        quantity: number;
      })[];
    product: {
      id: number;
      sku: string;
      title: string;
      stocked: boolean;
      price: number;
      desc?: string;
      image?: string;
      basePrice?: number;
      createdAt: string;
      updatedAt: string;
    };
    productUpdate: {
      sku?: string;
      title?: string;
      stocked?: boolean;
      price?: number;
      desc?: string;
      image?: string;
      basePrice?: number;
      updatedAt?: string;
    };
    productList: {
      items: (components["schemas"]["product"])[];
      total: number;
      page: number;
      pageSize: number;
    };
    productCreate: {
      sku: string;
      title: string;
      stocked: boolean;
      price: number;
      desc?: string;
      image?: string;
      basePrice?: number;
    };
    task: {
      id: number;
      desc: string;
      completed: boolean;
    };
    taskUpdate: {
      desc?: string;
      completed?: boolean;
    };
    taskCreate: {
      desc: string;
      completed: boolean;
    };
    user: {
      id: number;
      firstName: string;
      lastName: string;
      age: number;
      /** Format: email */
      email: string;
      image: string;
      phone: string;
      company: string;
      createdAt: string;
      address: {
        street: string;
        city: string;
        zip: string;
      };
    };
    userUpdate: {
      firstName?: string;
      lastName?: string;
      age?: number;
      /** Format: email */
      email?: string;
      image?: string;
      phone?: string;
      company?: string;
      address?: {
        street: string;
        city: string;
        zip: string;
      };
    };
    userList: {
      items: (components["schemas"]["user"])[];
      total: number;
      page: number;
      pageSize: number;
    };
    userCreate: {
      firstName: string;
      lastName: string;
      age: number;
      /** Format: email */
      email: string;
      image: string;
      phone: string;
      company: string;
      address: {
        street: string;
        city: string;
        zip: string;
      };
    };
  };
  responses: never;
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
